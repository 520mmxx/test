name: IPv6 Address Collector No.2

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  fetch_ipv6_addresses:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Specify the Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install beautifulsoup4 requests

      - name: Fetch and extract IPv6 addresses
        run: |
          import requests
          from bs4 import BeautifulSoup
          import re

          # Fetch the webpage
          url = "https://stock.hostmonit.com/CloudFlareYesV6"
          response = requests.get(url)
          response.raise_for_status()  # Raise an error for bad responses

          # Parse the HTML
          soup = BeautifulSoup(response.text, 'html.parser')

          # Find all relevant table cells
          cells = soup.find_all('td', class_='el-table_1_column_2')

          # Extract IPv6 addresses from the second occurrence
          ipv6_addresses = []
          if len(cells) > 1:  # Check if there are at least two occurrences
              for address in cells[1].find_all('div', class_='cell'):
                  ipv6 = address.get_text(strip=True)
                  if re.match(r'^[0-9a-fA-F:]+$', ipv6:  # Validate IPv6 format
                      ipv6_addresses.append(f"[{ipv6}]")

          # Write to ipv6_addresses.txt
          with open('ipv6_addresses.txt', 'w') as f:
              for addr in ipv6_addresses:
                  f.write(f"{addr}\n")

          # Output the results
          if ipv6_addresses:
              print("Extracted IPv6 addresses:")
              print("\n".join(ipv6_addresses))
          else:
              print("No IPv6 addresses found.")

      - name: Update ipv6collect2.txt
        run: |
          # Remove duplicates and write to ipv6collect2.txt
          sort -u ipv6_addresses.txt > ipv6collect2.txt
          echo "Updated ipv6collect2.txt with unique IPv6 addresses."

      - name: Check for changes
        run: |
          # Check if ipv6collect2.txt has changed
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git diff --exit-code ipv6collect2.txt || (git commit -am "Update ipv6collect2.txt with new IPv6 addresses" && git push)
