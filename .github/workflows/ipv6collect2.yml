name: IPv6 Address Collector No.2

on:
  schedule:
    - cron: '0 16 * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  fetch_ipv6_addresses:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Specify the Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install beautifulsoup4 requests

      - name: Create Python script
        run: |
          echo "import requests" > fetch_ipv6.py
          echo "from bs4 import BeautifulSoup" >> fetch_ipv6.py
          echo "import re" >> fetch_ipv6.py
          echo "import time" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Fetch the webpage" >> fetch_ipv6.py
          echo "url = 'https://stock.hostmonit.com/CloudFlareYesV6'" >> fetch_ipv6.py
          echo "headers = {" >> fetch_ipv6.py
          echo "    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'," >> fetch_ipv6.py
          echo "    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'," >> fetch_ipv6.py
          echo "    'Accept-Language': 'en-US,en;q=0.5'," >> fetch_ipv6.py
          echo "    'Referer': 'https://www.google.com/'" >> fetch_ipv6.py
          echo "}" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "try:" >> fetch_ipv6.py
          echo "    response = requests.get(url, headers=headers)" >> fetch_ipv6.py
          echo "    response.raise_for_status()" >> fetch_ipv6.py
          echo "except requests.exceptions.HTTPError as e:" >> fetch_ipv6.py
          echo "    print(f'HTTP error occurred: {e}')" >> fetch_ipv6.py
          echo "    time.sleep(60)" >> fetch_ipv6.py
          echo "    exit(1)" >> fetch_ipv6.py
          echo "except Exception as e:" >> fetch_ipv6.py
          echo "    print(f'An error occurred: {e}')" >> fetch_ipv6.py
          echo "    exit(1)" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Parse the HTML" >> fetch_ipv6.py
          echo "soup = BeautifulSoup(response.text, 'html.parser')" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Find all relevant table cells" >> fetch_ipv6.py
          echo "cells = soup.find_all('td', class_='el-table_1_column_2')" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Extract IPv6 addresses from the second occurrence" >> fetch_ipv6.py
          echo "ipv6_addresses = []" >> fetch_ipv6.py
          echo "if len(cells) > 1:  # Check if there are at least two occurrences" >> fetch_ipv6.py
          echo "    for address in cells[1].find_all('div', class_='cell'):" >> fetch_ipv6.py
          echo "        ipv6 = address.get_text(strip=True)" >> fetch_ipv6.py
          echo "        if re.match(r'^[0-9a-fA-F:]+$', ipv6):  # Validate IPv6 format" >> fetch_ipv6.py
          echo "            ipv6_addresses.append(f'[{ipv6}]')" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Write to ipv6_addresses.txt" >> fetch_ipv6.py
          echo "with open('ipv6_addresses.txt', 'w') as f:" >> fetch_ipv6.py
          echo "    for addr in ipv6_addresses:" >> fetch_ipv6.py
          echo "        f.write(f'{addr}\\n')" >> fetch_ipv6.py
          echo "" >> fetch_ipv6.py
          echo "# Output the results" >> fetch_ipv6.py
          echo "if ipv6_addresses:" >> fetch_ipv6.py
          echo "    print('Extracted IPv6 addresses:')" >> fetch_ipv6.py
          echo "    print('\\n'.join(ipv6_addresses))" >> fetch_ipv6.py
          echo "else:" >> fetch_ipv6.py
          echo "    print('No IPv6 addresses found.')" >> fetch_ipv6.py

      - name: Run Python script
        run: python fetch_ipv6.py

      - name: Update ipv6collect2.txt
        run: |
          # Remove duplicates and write to ipv6collect2.txt
          sort -u ipv6_addresses.txt > ipv6collect2.txt
          echo "Updated ipv6collect2.txt with unique IPv6 addresses."

      - name: Check for changes
        run: |
          # Check if ipv6collect2.txt has changed
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git diff --exit-code ipv6collect2.txt || (git commit -am "Update ipv6collect2.txt with new IPv6 addresses" && git push)
